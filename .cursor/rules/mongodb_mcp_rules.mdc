# MongoDB MCP Tools Rules and Best Practices

This document outlines the proper usage of MongoDB MCP tools for the health coach LangGraph agents project.

## Overview

MongoDB MCP tools provide comprehensive database management capabilities through a Model Context Protocol interface. These tools are ideal for managing user data, conversation history, agent memory, and persistent storage for AI agents.

## Connection Management

### Connection Verification
- Always verify connection before performing operations
- Use `mcp_MongoDB_list-databases` to test connectivity
- Handle connection errors gracefully in production code

```python
# Example: Verify connection before operations
try:
    databases = mcp_MongoDB_list-databases()
    print("MongoDB connection verified")
except Exception as e:
    print(f"MongoDB connection failed: {e}")
```

### Connection Switching
- Use `mcp_MongoDB_switch-connection` when working with multiple MongoDB instances
- Ensure connection string format: `mongodb://` or `mongodb+srv://`

## Database Operations

### Database Management
- **List Databases**: `mcp_MongoDB_list-databases` - Returns name and size information
- **Database Statistics**: `mcp_MongoDB_db-stats` - Detailed metrics including collections, objects, storage
- **Drop Database**: `mcp_MongoDB_drop-database` - Use with extreme caution

### Best Practices for Database Operations
- Always check database existence before operations
- Use descriptive database names (e.g., `health_coach_prod`, `health_coach_dev`)
- Monitor database sizes regularly using `db-stats`

## Collection Operations

### Collection Management
- **List Collections**: `mcp_MongoDB_list-collections` - Shows all collections in a database
- **Create Collection**: `mcp_MongoDB_create-collection` - Explicit collection creation
- **Drop Collection**: `mcp_MongoDB_drop-collection` - Permanent deletion
- **Rename Collection**: `mcp_MongoDB_rename-collection` - Update collection names

### Collection Schema and Analysis
- **Schema Analysis**: `mcp_MongoDB_collection-schema` - Understand document structure
- **Storage Size**: `mcp_MongoDB_collection-storage-size` - Monitor collection growth
- **Index Information**: `mcp_MongoDB_collection-indexes` - View existing indexes

### Health Coach Project Collection Naming Conventions
```
users                    # User profiles and authentication
conversations           # Chat history and interactions
agent_memory            # LangGraph agent memory storage
health_assessments      # Health evaluations and progress
recommendations         # AI-generated health recommendations
session_data            # Temporary session information
```

## Document Operations

### CRUD Operations
- **Find Documents**: `mcp_MongoDB_find`
  - Use `filter` for query conditions
  - Apply `projection` to limit returned fields
  - Use `sort` for ordering results
  - Set `limit` to control result size

- **Insert Documents**: `mcp_MongoDB_insert-many`
  - Always use arrays even for single documents
  - Include proper error handling
  - Return inserted IDs for reference

- **Update Documents**: `mcp_MongoDB_update-many`
  - Use precise filters to avoid unintended updates
  - Use `upsert: true` when appropriate
  - Include update operators (`$set`, `$push`, etc.)

- **Delete Documents**: `mcp_MongoDB_delete-many`
  - Always use specific filters
  - Consider soft deletes for important data
  - Log deletion operations

### Document Query Examples for Health Coach
```javascript
// Find user conversations
{
  "filter": {"user_id": "user123", "created_at": {"$gte": "2024-01-01"}},
  "sort": {"created_at": -1},
  "limit": 50
}

// Find health recommendations by category
{
  "filter": {"user_id": "user123", "category": "nutrition"},
  "projection": {"recommendation": 1, "confidence_score": 1, "created_at": 1}
}
```

### Count Operations
- **Count Documents**: `mcp_MongoDB_count`
- Use for analytics and pagination
- Apply filters for conditional counting

## Index Management

### Index Operations
- **List Indexes**: `mcp_MongoDB_collection-indexes` - View all indexes
- **Create Index**: `mcp_MongoDB_create-index` - Improve query performance

### Index Best Practices
- Create indexes on frequently queried fields
- Use compound indexes for multi-field queries
- Monitor index usage and performance

### Recommended Indexes for Health Coach
```javascript
// User lookup index
{"user_id": 1}

// Conversation timeline index
{"user_id": 1, "created_at": -1}

// Health assessment search
{"user_id": 1, "assessment_type": 1, "date": -1}

// Agent memory retrieval
{"agent_id": 1, "memory_type": 1, "relevance_score": -1}
```

## Advanced Operations

### Aggregation Pipelines
- **Aggregate**: `mcp_MongoDB_aggregate` - Complex data processing
- Use for analytics, reporting, and data transformation
- Combine multiple stages for sophisticated queries

### Query Performance
- **Explain Plans**: `mcp_MongoDB_explain` - Analyze query performance
- Use to optimize slow queries
- Monitor index usage and execution statistics

### Example Aggregation for Health Analytics
```javascript
[
  {"$match": {"user_id": "user123"}},
  {"$group": {
    "_id": "$category",
    "total_recommendations": {"$sum": 1},
    "avg_confidence": {"$avg": "$confidence_score"}
  }},
  {"$sort": {"total_recommendations": -1}}
]
```

## Error Handling and Security

### Error Handling Patterns
- Always wrap MCP operations in try-catch blocks
- Check for authorization errors (common with system databases)
- Validate input parameters before operations
- Log errors with context information

### Security Best Practices
- Never expose raw database operations to end users
- Validate and sanitize all input data
- Use least-privilege access principles
- Avoid querying system databases (`admin`, `config`, `local`)

### Example Error Handling
```python
try:
    result = mcp_MongoDB_find(
        database="health_coach_prod",
        collection="users",
        filter={"email": user_email}
    )
except AuthorizationError:
    logger.error("Insufficient permissions for database operation")
except ConnectionError:
    logger.error("Database connection failed")
except Exception as e:
    logger.error(f"Unexpected database error: {e}")
```

## Data Modeling for Health Coach

### User Document Structure
```javascript
{
  "_id": ObjectId,
  "user_id": "unique_user_identifier",
  "email": "user@example.com",
  "profile": {
    "name": "User Name",
    "age": 30,
    "health_goals": ["weight_loss", "fitness"],
    "medical_conditions": []
  },
  "preferences": {
    "notification_frequency": "daily",
    "preferred_language": "en"
  },
  "created_at": ISODate,
  "updated_at": ISODate
}
```

### Conversation Document Structure
```javascript
{
  "_id": ObjectId,
  "conversation_id": "conv_123",
  "user_id": "user123",
  "messages": [
    {
      "role": "user",
      "content": "How can I improve my diet?",
      "timestamp": ISODate
    },
    {
      "role": "assistant",
      "content": "Here are some recommendations...",
      "timestamp": ISODate,
      "agent_type": "nutrition_agent"
    }
  ],
  "session_metadata": {
    "start_time": ISODate,
    "end_time": ISODate,
    "agent_chain": ["router", "nutrition_agent", "response_formatter"]
  }
}
```

## Monitoring and Maintenance

### Regular Monitoring
- Use `mcp_MongoDB_db-stats` for database health checks
- Monitor collection sizes with `mcp_MongoDB_collection-storage-size`
- Review logs with `mcp_MongoDB_mongodb-logs`

### Performance Optimization
- Regularly analyze query performance with `explain`
- Update indexes based on query patterns
- Archive old data to maintain performance

### Backup and Recovery
- Implement regular backup strategies
- Test recovery procedures
- Document critical collections and their purposes

## Development vs Production

### Development Environment
- Use descriptive database names (`health_coach_dev`)
- Enable verbose logging
- Test with sample data regularly

### Production Environment
- Use secure connection strings
- Implement proper monitoring
- Set up automated backups
- Use read replicas for analytics queries

## Common Patterns

### Pagination Pattern
```python
def get_paginated_results(collection, filter_query, page=1, page_size=20):
    skip = (page - 1) * page_size
    
    # Get total count
    total = mcp_MongoDB_count(
        database="health_coach_prod",
        collection=collection,
        query=filter_query
    )
    
    # Get paginated results
    results = mcp_MongoDB_find(
        database="health_coach_prod",
        collection=collection,
        filter=filter_query,
        limit=page_size,
        sort={"created_at": -1}
    )
    
    return {
        "data": results,
        "total": total,
        "page": page,
        "pages": math.ceil(total / page_size)
    }
```

### Upsert Pattern for User Preferences
```python
def update_user_preferences(user_id, preferences):
    return mcp_MongoDB_update-many(
        database="health_coach_prod",
        collection="users",
        filter={"user_id": user_id},
        update={"$set": {"preferences": preferences, "updated_at": datetime.utcnow()}},
        upsert=True
    )
```

## Integration with LangGraph Agents

### Agent Memory Storage
- Store agent conversation memory in dedicated collections
- Use vector embeddings for semantic search capabilities
- Implement TTL (Time To Live) for temporary session data

### Agent State Persistence
- Save agent workflow states for resumption
- Store intermediate results for complex multi-step processes
- Implement checkpointing for long-running agent chains

### Example Agent Memory Integration
```python
def store_agent_memory(agent_id, user_id, memory_data):
    return mcp_MongoDB_insert-many(
        database="health_coach_prod",
        collection="agent_memory",
        documents=[{
            "agent_id": agent_id,
            "user_id": user_id,
            "memory_type": memory_data["type"],
            "content": memory_data["content"],
            "relevance_score": memory_data.get("relevance", 1.0),
            "created_at": datetime.utcnow(),
            "expires_at": datetime.utcnow() + timedelta(days=30)
        }]
    )
```

## Troubleshooting

### Common Issues
1. **Authorization Errors**: Check database permissions and connection string
2. **Connection Timeouts**: Verify network connectivity and MongoDB server status
3. **Query Performance**: Use `explain` to analyze slow queries
4. **Schema Validation**: Use `collection-schema` to understand document structure

### Debug Commands
```python
# Check connection
mcp_MongoDB_list-databases()

# Verify collection exists
mcp_MongoDB_list-collections(database="health_coach_prod")

# Analyze query performance
mcp_MongoDB_explain(
    database="health_coach_prod",
    collection="conversations",
    method=[{"name": "find", "arguments": {"filter": {"user_id": "test"}}}]
)
```

Remember: Always test MongoDB operations in development before deploying to production, and implement proper error handling and logging for all database interactions.
alwaysApply: false
---
