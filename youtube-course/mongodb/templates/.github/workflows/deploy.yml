name: Deploy RAG API

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1

jobs:
  # Code Quality Checks
  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff black mypy bandit safety
          
      - name: Run linting
        run: |
          ruff check .
          black --check .
          
      - name: Run type checking
        run: mypy . --ignore-missing-imports
        
      - name: Security scan
        run: |
          bandit -r app/ -ll
          safety check

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
          
      - name: Run unit tests
        env:
          REDIS_URL: redis://localhost:6379
          MONGODB_URI: ${{ secrets.MONGODB_URI_TEST }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          VOYAGE_AI_API_KEY: ${{ secrets.VOYAGE_AI_API_KEY }}
        run: |
          pytest tests/unit -v --cov=app --cov-report=xml --cov-report=html
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio
          
      - name: Run integration tests
        env:
          REDIS_URL: redis://localhost:6379
          MONGODB_URI: ${{ secrets.MONGODB_URI_TEST }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          VOYAGE_AI_API_KEY: ${{ secrets.VOYAGE_AI_API_KEY }}
        run: |
          pytest tests/integration -v -m "not slow"

  # Build Docker Image
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
            ${{ secrets.DOCKER_USERNAME }}/rag-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_VERSION=${{ github.sha }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker, security-scan]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging-api.yourdomain.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Kubernetes (Staging)
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_STAGING }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Update image in deployment
          kubectl set image deployment/rag-api \
            rag-api=ghcr.io/${{ github.repository }}:${{ github.sha }} \
            -n rag-staging
            
          # Wait for rollout
          kubectl rollout status deployment/rag-api -n rag-staging
          
          # Run smoke tests
          ./scripts/smoke-tests.sh staging
          
      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker, security-scan]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://api.yourdomain.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production
          
      - name: Deploy to AWS ECS
        env:
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          # Install AWS CLI
          pip install awscli
          
          # Register new task definition
          aws ecs register-task-definition \
            --family rag-api-production \
            --container-definitions '[{
              "name": "rag-api",
              "image": "ghcr.io/${{ github.repository }}:${{ github.sha }}",
              "essential": true,
              "portMappings": [{"containerPort": 8000}],
              "environment": [
                {"name": "API_TITLE", "value": "RAG API Service"},
                {"name": "API_VERSION", "value": "1.0.0"},
                {"name": "MONGODB_DATABASE", "value": "rag_production"},
                {"name": "LOG_LEVEL", "value": "INFO"}
              ],
              "secrets": [
                {"name": "MONGODB_URI", "valueFrom": "arn:aws:secretsmanager:us-east-1:123456789:secret:mongodb-uri"},
                {"name": "OPENAI_API_KEY", "valueFrom": "arn:aws:secretsmanager:us-east-1:123456789:secret:openai-api-key"},
                {"name": "VOYAGE_AI_API_KEY", "valueFrom": "arn:aws:secretsmanager:us-east-1:123456789:secret:voyage-ai-api-key"}
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/rag-api-production",
                  "awslogs-region": "us-east-1",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }]' \
            --requires-compatibilities FARGATE \
            --network-mode awsvpc \
            --cpu 1024 \
            --memory 2048 \
            --execution-role-arn arn:aws:iam::123456789:role/ecsTaskExecutionRole \
            --task-role-arn arn:aws:iam::123456789:role/ecsTaskRole
            
          # Update service
          aws ecs update-service \
            --cluster rag-api-production \
            --service rag-api-service \
            --task-definition rag-api-production \
            --force-new-deployment
            
          # Wait for service to stabilize
          aws ecs wait services-stable \
            --cluster rag-api-production \
            --services rag-api-service
            
      - name: Run production tests
        run: |
          ./scripts/production-tests.sh
          
      - name: Update deployment status
        if: always()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          state: ${{ job.status }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          
      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  # Post-deployment monitoring
  post-deployment:
    name: Post Deployment Checks
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Check API health
        run: |
          # Check staging if deployed
          if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            curl -f https://staging-api.yourdomain.com/health || exit 1
          fi
          
          # Check production if deployed
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            curl -f https://api.yourdomain.com/health || exit 1
          fi
          
      - name: Run synthetic monitoring
        run: |
          # Run API tests
          npm install -g newman
          newman run postman-collection.json \
            -e postman-environment.json \
            --bail
            
      - name: Check performance metrics
        run: |
          # Run performance tests
          npm install -g artillery
          artillery run performance-tests.yml