apiVersion: v1
kind: Namespace
metadata:
  name: rag-system
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: rag-config
  namespace: rag-system
data:
  API_TITLE: "RAG API Service"
  API_VERSION: "1.0.0"
  MONGODB_DATABASE: "rag_production"
  LOG_LEVEL: "INFO"
  CACHE_TTL: "3600"
  MAX_BATCH_SIZE: "100"
  REQUEST_TIMEOUT: "30"
  API_WORKERS: "4"
---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: rag-secrets
  namespace: rag-system
type: Opaque
stringData:
  mongodb-uri: "mongodb+srv://username:password@cluster.mongodb.net/rag_production?retryWrites=true"
  redis-url: "redis://redis-service:6379"
  openai-api-key: "your-openai-api-key"
  voyage-ai-api-key: "your-voyage-api-key"
  valid-api-keys: "api-key-1,api-key-2,api-key-3"
---
# PersistentVolumeClaim for logs
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rag-logs-pvc
  namespace: rag-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rag-api
  namespace: rag-system
  labels:
    app: rag-api
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: rag-api
  template:
    metadata:
      labels:
        app: rag-api
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: rag-api-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: rag-api
        image: your-registry/rag-api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        # From ConfigMap
        - name: API_TITLE
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: API_TITLE
        - name: API_VERSION
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: API_VERSION
        - name: MONGODB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: MONGODB_DATABASE
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: LOG_LEVEL
        - name: CACHE_TTL
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: CACHE_TTL
        - name: MAX_BATCH_SIZE
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: MAX_BATCH_SIZE
        - name: REQUEST_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: REQUEST_TIMEOUT
        - name: API_WORKERS
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: API_WORKERS
        # From Secret
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: rag-secrets
              key: mongodb-uri
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: rag-secrets
              key: redis-url
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: rag-secrets
              key: openai-api-key
        - name: VOYAGE_AI_API_KEY
          valueFrom:
            secretKeyRef:
              name: rag-secrets
              key: voyage-ai-api-key
        - name: VALID_API_KEYS
          valueFrom:
            secretKeyRef:
              name: rag-secrets
              key: valid-api-keys
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "2Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: cache
          mountPath: /app/cache
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: logs
        persistentVolumeClaim:
          claimName: rag-logs-pvc
      - name: cache
        emptyDir:
          sizeLimit: 5Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - rag-api
              topologyKey: kubernetes.io/hostname
---
# Service
apiVersion: v1
kind: Service
metadata:
  name: rag-api-service
  namespace: rag-system
  labels:
    app: rag-api
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: rag-api
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600
---
# ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rag-api-sa
  namespace: rag-system
---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rag-api-hpa
  namespace: rag-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rag-api
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
# PodDisruptionBudget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: rag-api-pdb
  namespace: rag-system
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: rag-api
---
# NetworkPolicy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: rag-api-network-policy
  namespace: rag-system
spec:
  podSelector:
    matchLabels:
      app: rag-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: prometheus
    - podSelector:
        matchLabels:
          app: rag-api
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443  # HTTPS for external APIs
    - protocol: TCP
      port: 27017  # MongoDB
    - protocol: TCP
      port: 6379  # Redis
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 53  # DNS
    - protocol: UDP
      port: 53